{"ast":null,"code":"import { FormControl } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../_services/city.service\";\nimport * as i2 from \"../_services/country.service\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/material/form-field\";\nimport * as i5 from \"@angular/material/input\";\nimport * as i6 from \"@angular/common\";\n\nfunction LocationsFormComponent_mat_option_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 5);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const city_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", city_r2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", city_r2.name, \" \");\n  }\n}\n\nexport class LocationsFormComponent {\n  constructor(cityService, countryService) {\n    this.cityService = cityService;\n    this.countryService = countryService;\n    this.myControl = new FormControl();\n    this.cities = [];\n    this.countries = [];\n  }\n\n  ngOnInit() {\n    this.cityService.getAllCities().subscribe(data => {\n      this.cities = data;\n    });\n    this.countryService.getAllCountries().subscribe(data => {\n      this.countries = data;\n    });\n  }\n\n}\n\nLocationsFormComponent.ɵfac = function LocationsFormComponent_Factory(t) {\n  return new (t || LocationsFormComponent)(i0.ɵɵdirectiveInject(i1.CityService), i0.ɵɵdirectiveInject(i2.CountryService));\n};\n\nLocationsFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LocationsFormComponent,\n  selectors: [[\"app-locations-form\"]],\n  decls: 9,\n  vars: 5,\n  consts: [[1, \"example-form\"], [\"appearance\", \"fill\", 1, \"example-full-width\"], [\"type\", \"text\", \"matInput\", \"\", 3, \"formControl\", \"matAutocomplete\"], [\"auto\", \"matAutocomplete\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\"]],\n  template: function LocationsFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵelementStart(1, \"mat-form-field\", 1);\n      i0.ɵɵelementStart(2, \"mat-label\");\n      i0.ɵɵtext(3, \"Please select a place\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(4, \"input\", 2);\n      i0.ɵɵelementStart(5, \"mat-autocomplete\", null, 3);\n      i0.ɵɵtemplate(7, LocationsFormComponent_mat_option_7_Template, 2, 2, \"mat-option\", 4);\n      i0.ɵɵpipe(8, \"async\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(6);\n\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"formControl\", ctx.myControl)(\"matAutocomplete\", _r0);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(8, 3, ctx.cities));\n    }\n  },\n  directives: [i3.ɵNgNoValidate, i3.NgControlStatusGroup, i3.NgForm, i4.MatFormField, i4.MatLabel, i5.MatInput, i3.DefaultValueAccessor, i3.NgControlStatus, i6.NgForOf],\n  pipes: [i6.AsyncPipe],\n  styles: [\".example-form[_ngcontent-%COMP%] {\\r\\n    min-width: 150px;\\r\\n    max-width: 500px;\\r\\n    width: 100%;\\r\\n  }\\r\\n  \\r\\n  .example-full-width[_ngcontent-%COMP%] {\\r\\n    width: 100%;\\r\\n  }\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxvY2F0aW9ucy1mb3JtLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxnQkFBZ0I7SUFDaEIsZ0JBQWdCO0lBQ2hCLFdBQVc7RUFDYjs7RUFFQTtJQUNFLFdBQVc7RUFDYiIsImZpbGUiOiJsb2NhdGlvbnMtZm9ybS5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmV4YW1wbGUtZm9ybSB7XHJcbiAgICBtaW4td2lkdGg6IDE1MHB4O1xyXG4gICAgbWF4LXdpZHRoOiA1MDBweDtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gIH1cclxuICBcclxuICAuZXhhbXBsZS1mdWxsLXdpZHRoIHtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gIH0iXX0= */\"]\n});","map":{"version":3,"sources":["C:\\Users\\DELL\\Desktop\\bachelor-thesis\\trip-planner-front\\src\\app\\locations-form\\locations-form.component.ts","C:\\Users\\DELL\\Desktop\\bachelor-thesis\\trip-planner-front\\src\\app\\locations-form\\locations-form.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { City } from '../_models/city';\nimport { Country } from '../_models/country';\nimport { CityService } from '../_services/city.service';\nimport { CountryService } from '../_services/country.service';\n\n@Component({\n  selector: 'app-locations-form',\n  templateUrl: './locations-form.component.html',\n  styleUrls: ['./locations-form.component.css']\n})\nexport class LocationsFormComponent implements OnInit {\n  myControl = new FormControl();\n  cities: City[];\n  countries:Country[];\n\n  constructor(private cityService : CityService,\n    private countryService : CountryService) { \n    this.cities = [];\n    this.countries = [];\n  }\n\n  ngOnInit(): void {\n\n    this.cityService.getAllCities().subscribe(\n      data => {\n        this.cities = data;\n\n      }\n    );\n\n    this.countryService.getAllCountries().subscribe(\n      data => {\n        this.countries = data;\n      }\n    );\n  }\n\n}\n","<form class=\"example-form\">\n    <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n      <mat-label>Please select a place</mat-label>\n      <input type=\"text\" matInput [formControl]=\"myControl\" [matAutocomplete]=\"auto\">\n      <mat-autocomplete #auto=\"matAutocomplete\" >\n        <mat-option *ngFor=\"let city of cities | async\" [value]=\"city\">\n          {{city.name}}\n        </mat-option>\n      </mat-autocomplete>\n    </mat-form-field>\n  </form>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}